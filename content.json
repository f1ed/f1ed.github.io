{"pages":[],"posts":[{"title":"Paul---big thief(Test)","text":"还是一个测试测试 有一说一Then he showed me what was love. 让我知道什么是爱。 I‘ll be your morning bright goodnight shadow machine. 我会是你早晨的阳光 你的晚安吻 你的影机。 I‘ll be your record player baby if you know what I mean. 如果你希望 我也会是你的唱机。 I‘ll be your real tough cookie with the whiskey breath. 我会是你带着威士忌香味的硬邦邦的曲奇。 I’ll be a killer and a thriller and the cause of our death. 我也可以成为可怕的杀手 让我们一起死去。 In the blossom of the months. 在花开的时候。 I was sure that I’d get driven off with thought. 我将会带着乱七八糟的想法离开。 So I swallowed all of it. 所以我将一切埋在心里。 As I realized there was no one who could kiss away my shit. 因为我意识到没有人可以让我糟透的生活好起来了。 I was your starry-eyed lover and the one that you saw. 我曾是你眼中 看见你时眼睛如星星般闪烁的爱人。 I was your hurricane rider and the woman you’d call. 曾在你需要时像飓风骑士一样飞奔而至。 We were just two moonshiners on the cusp of a breath. 但我们不过是在呼吸交汇中偷偷品尝了烈酒的气息。 And I’ve been burning for you baby since the minute I left. 而从我离开的那一刻起 我都在为你燃烧。 Good night! 晚安！ 有二说二有二说一有二说二有三说三","link":"/2020/02/23/Paul/"},{"title":"Hello f1ed","text":"这只是一个测试 描述恰逢H国国庆，国王邀请n位大臣来玩一个有奖游戏。首先，他让每个大臣在左、右手上面分别写下一个整数，国王自己也在左、右手上各写一个整数。然后，让这n位大臣排成一排，国王站在队伍的最前面。排好队后，所有的大臣都会获得国王奖赏的若干金币，每位大臣获得的金币数分别是：排在该大臣前面的所有人的左手上的数的乘积除以他自己右手上的数，然后向下取整得到的结果。国王不希望某一个大臣获得特别多的奖赏，所以他想请你帮他重新安排一下队伍的顺序，使得获得奖赏最多的大臣，所获奖赏尽可能的少。注意，国王的位置始终在队伍的最前面。 输入格式第一行包含一个整数n，表示大臣的人数。第二行包含两个整数a和b，之间用一个空格隔开，分别表示国王左手和右手上的整数。接下来n行，每行包含两个整数a和b，之间用一个空格隔开，分别表示每个大臣左手和右手上的整数。 $x_2+\\Sigma_1^3$ Solution… code123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;ctime&gt;#include&lt;cstdlib&gt;#include&lt;cmath&gt;#include&lt;cstring&gt;#include&lt;string&gt;#include&lt;set&gt;#include&lt;map&gt;#include&lt;vector&gt;#include&lt;queue&gt;#include&lt;algorithm&gt;#ifdef WIN32#define AUTO \"%I64d\"#else#define AUTO \"%lld\"#endif#define INF 0x3f3f3f3f#define CLOCK CLOCKS_PER_SEC#define cle(x) memset(x,0,sizeof(x))#define maxcle(x) memset(x,0x3f,sizeof(x))#define mincle(x) memset(x,-1,sizeof(x))#define maxx(x1,x2,x3) max(x1,max(x2,x3))#define minn(x1,x2,x3) min(x1,min(x2,x3))#define cop(a,x) memcpy(x,a,sizeof(a))#define FROP \"hdu\"#define LL long long#define smin(x,tmp) x=min(x,tmp)#define smax(x,tmp) x=max(x,tmp)using namespace std;const int N = 1005;struct bigint{ static const int P =1,M=10; int w[4050]; bigint(){cle(w);w[0]=1;} void read() { string s; cin&gt;&gt;s; int now=1,c1=1,ct=0; for(int i = s.size()-1;i&gt;=0;i--) { w[now]+=(s[i]-'0')*c1; c1*=10; ct++; if(ct==P&amp;&amp;i){c1=1;ct=0;now++;} } w[0]=now; } bigint operator * (const int &amp;b) { bigint a=*this; bigint c; int &amp;len=c.w[0]; len=a.w[0]+5; for(int i = 1; i &lt;= len;i++) { c.w[i]+=a.w[i]*b; c.w[i+1]=c.w[i]/M; c.w[i]%=M; } while(len&gt;1&amp;&amp;!c.w[len])len--; return c; } bigint operator /(const int &amp;b) { bigint a=*this; bigint c; int &amp;len=c.w[0]; len=a.w[0]; int tmp=0; for(int i = len; i ;i--) { tmp+=a.w[i]; if(tmp&gt;=b) { c.w[i]+=tmp/b; tmp%=b; } tmp*=M; } while(len&gt;1&amp;&amp;!c.w[len])len--; return c; } bool operator &lt; (const bigint &amp;b)const { bigint a=*this; if(a.w[0]^b.w[0])return a.w[0]&lt;b.w[0]; for(int i = a.w[0];i;i--) if(a.w[i]^b.w[i])return a.w[i]&lt;b.w[i]; return false; } void print() { printf(\"%d\",w[w[0]]); for(int i = w[0]-1;i;i--) printf(\"%0*d\",P,w[i]); }}L,R;int n;struct ii{ int l,r; ii(int l =0,int r=0):l(l),r(r){ } bool operator &lt; (const ii &amp;b)const { return l*r&lt;b.l*b.r; }}node[N];int main(){ freopen(FROP\".in\",\"r\",stdin); freopen(FROP\".out\",\"w\",stdout); scanf(\"%d\",&amp;n); L.read(); R.read(); for(int i = 1;i &lt;= n; i++) { int x,y; scanf(\"%d%d\",&amp;x,&amp;y); node[i]=ii(x,y); } sort(node+1,node+n+1); bigint ans,tmp=L; for(int i = 1; i &lt;= n; i++) { bigint x=tmp/node[i].r; if(ans&lt;x)ans=x; tmp=tmp*node[i].l; } ans.print(); return 0;} reference[1] ……xxx [2]","link":"/2020/02/24/hello-f1ed/"}],"tags":[{"name":"测试","slug":"测试","link":"/tags/%E6%B5%8B%E8%AF%95/"}],"categories":[{"name":"测试","slug":"测试","link":"/categories/%E6%B5%8B%E8%AF%95/"}]}